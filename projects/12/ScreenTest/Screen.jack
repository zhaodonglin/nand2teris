// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array a;
    
    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let a = Array.new(16);
        let a[0] = 1;
        let a[1] = 2;
        let a[2] = 4;
        let a[3] = 8;
        let a[4] = 16;
        let a[5] = 32;
        let a[6] = 64;
        let a[7] = 128;
        let a[8] = 256;
        let a[9] = 512;
        let a[10] = 1024;
        let a[11] = 2048;
        let a[12] = 4096;
        let a[13] = 8192;
        let a[14] = 16384;
        let a[15] = 16384*2;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i ;
        let i = 16384;
        while (i < 24576){
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int bit;
        var int zero_bit;
        var int ram;

        let address = 16384 + (32 * y) + (x / 16);
        let value = Memory.peek(address);
        let bit = x - ((x/16) *16);

        let ram = 0;

        if (color) {
            let value = value | a[bit];
        } else {
            let zero_bit = ~(a[bit]);
            let value = value & zero_bit;
        }

        let ram[8000] = value;
        let ram[8001] = color;
        
        do Memory.poke(address, value);
        return;
    }

    function void drawLine_helper_a(int x, int y, int dx, int dy){
        var int a;
        var int b;
        var int diff;
        var Array ram;
        var int i;

        let a = 0;
        let b = 0;
        let diff = 0;


        let ram = 0;
        let i = 0;
        let ram[9006] = dx;
        let ram[9007] = dy;

        while (~(a > dx)) {
            while(~(b > dy)) {
                do Screen.drawPixel(x+a, y+b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
                let ram[9008+i] = a;
                let i = i + 1;
                let ram[9008+i] = b;
                let i = i + 1;
            }
            let a = a + 1;
        }
        return;
    }

    function void drawLine_helper_b(int x, int y, int dx, int dy){
        var int a;
        var int b;
        var int diff;

        let a = 0;
        let b = 0;
        let diff = 0;

        while ((a > dx)) {
            while(~(b > dy)) {
                do Screen.drawPixel(x+a, y+b);
                if (diff < 0) {
                    let a = a - 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff + dx;
                }
            }
            let a = a -1;
        }
        return;
    }

    function void drawLine_vertical(int x, int y1, int y2){
        var int dy;
        var int y;

        let dy = Math.abs(y2 - y1);
        let y = Math.min(y1, y2);

        while (~(dy < 0)) {
            do Screen.drawPixel(x, y);
            let dy = dy - 1;
            let y = y + 1;
        } 
        return; 
    }

    function void drawLine_level(int y, int x1, int x2){
        var int dx;
        var int x;
        let dx = Math.abs(x2 -x1);
        let x = Math.min(x1, x2);
        while(~(dx < 0)) {
            do Screen.drawPixel(x, y);
            let dx = dx - 1;
            let x = x + 1;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var Array ram;

        let dx = x2 - x1;
        let dy = y2 - y1;
        let ram = 0;

        let ram[9000] = x1;
        let ram[9001] = x2;
        let ram[9002] = y1;
        let ram[9003] = y2;

        let ram[9004] = dx;
        let ram[9005] = dy;

        if (dx > 0) {
            if (dy > 0) {
                do Screen.drawLine_helper_a(x1, y1, dx, dy);
            }
            else {
                if (dy < 0){
                    do Screen.drawLine(x2, y2, x1, y1);
                } else {
                    do Screen.drawLine_level(y1, x1, x2);
                }
            }
        } else {
            if (dx < 0) {
                if (dy > 0) {
                    do Screen.drawLine_helper_b(x1, y1, dx, dy);
                } else {
                    if (dy < 0){
                        do Screen.drawLine(x2, y2, x1, y1);
                    } else {
                        do Screen.drawLine_level(y1, x1, x2);
                    }
                }
            } else {
                do Screen.drawLine_vertical(x1, y1, y2);
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y, dy;
        let dy = Math.abs(y2-y1);
        let y = Math.min(y1, y2);
        while(~(dy < 0)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
            let dy = dy -1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int a, b;

        let dy = 0 - r;
        while (~(dy > r)) {
            let b = (r*r) - (dy* dy);
            let a = Math.sqrt(b);
            do Screen.drawLine(x - a, y + dy, x + a, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
